        -:    0:Source:C:/Users/melia/CLionProjects/TPI-AyED1/ejercicios.cpp
        -:    0:Graph:C:\Users\melia\CLionProjects\TPI-AyED1\cmake-build-debug\CMakeFiles\tpi.dir\ejercicios.gcno
        -:    0:Data:C:\Users\melia\CLionProjects\TPI-AyED1\cmake-build-debug\CMakeFiles\tpi.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    1:#include "ejercicios.h"
        -:    2:#include "auxiliares.h"
        -:    3:#include <iostream>
        -:    4:#include <algorithm>
        -:    5:#include <fstream>
        -:    6:#include <iomanip>
        -:    7:using namespace std;
        -:    8:
        -:    9:/******++++**************************** EJERCICIO tiempoTotal ***********+++***********************/
function _Z11tiempoTotalSt6vectorISt5tupleIJdS0_IJddEEEESaIS2_EE called 1 returned 100% blocks executed 64%
        1:   10:tiempo tiempoTotal(viaje v) {
        1:   11:    tiempo t = maxTiempo(v) - minTiempo(v);;
        1:   11-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   11-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   11-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   11-block  3
call   10 returned 1
call   11 returned 1
    $$$$$:   11-block  4
call   12 never executed
    $$$$$:   11-block  5
    $$$$$:   11-block  6
call   13 never executed
        1:   12:    return t;
        1:   12-block  0
        -:   13:}
        -:   14:
        -:   15:/************++*********************** EJERCICIO distanciaTotal ************++*********************/
function _Z14distanciaTotalSt6vectorISt5tupleIJdS0_IJddEEEESaIS2_EE called 1 returned 100% blocks executed 75%
        1:   16:distancia distanciaTotal(viaje v) {
        -:   17:    distancia d;
        1:   18:    int i = 0;
        4:   19:    while (i < v.size()){
        1:   19-block  0
        4:   19-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   20:        d = d + (distEnKM(obtenerPosicion(v[i]), obtenerPosicion(buscoSiguientePunto(v, v[i]))));
        3:   20-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   20-block  1
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   20-block  2
call    8 returned 3
call    9 returned 3
branch 10 taken 3 (fallthrough)
branch 11 taken 0 (throw)
        3:   20-block  3
call   12 returned 3
branch 13 taken 3 (fallthrough)
branch 14 taken 0 (throw)
        3:   20-block  4
call   15 returned 3
    $$$$$:   20-block  5
    $$$$$:   20-block  6
    $$$$$:   20-block  7
    $$$$$:   20-block  8
call   16 never executed
        3:   21:        i++;
        -:   22:    }
        1:   23:    return d;
        1:   23-block  0
        1:   23-block  1
        -:   24:}
        -:   25:
        -:   26:/*****************************+***** EJERCICIO excesoDeVelocidad **********************************/
function _Z17excesoDeVelocidadSt6vectorISt5tupleIJdS0_IJddEEEESaIS2_EE called 2 returned 100% blocks executed 84%
        2:   27:bool excesoDeVelocidad(viaje v) {
        2:   28:    bool resp = false;
        2:   29:    int i = 0;
        6:   30:    while (i < v.size()){
        2:   30-block  0
        6:   30-block  1
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:   31:        if (velocidad(v[i], buscoSiguientePunto(v, v[i])) > 80) {
        4:   31-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:   31-block  1
call    5 returned 4
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4:   31-block  2
call    9 returned 4
branch 10 taken 1 (fallthrough)
branch 11 taken 3
    $$$$$:   31-block  3
    $$$$$:   31-block  4
call   12 never executed
        1:   32:            resp = true;
        1:   33:            i = v.size();
        1:   33-block  0
call    0 returned 1
        -:   34:        }
        4:   35:        i++;
        4:   35-block  0
        -:   36:    }
        -:   37:
        2:   38:    return resp;
        2:   38-block  0
        2:   38-block  1
        -:   39:}
        -:   40:
        -:   41:/************************************ EJERCICIO recorridoCubierto *******************************/
function _Z19recorridoNoCubiertoSt6vectorISt5tupleIJdS0_IJddEEEESaIS2_EES_IS1_SaIS1_EEd called 3 returned 100% blocks executed 92%
        3:   42:vector<gps> recorridoNoCubierto(viaje v, recorrido r, distancia u) {
        3:   43:    vector<gps> resp = {};
        3:   43-block  0
call    0 returned 3
        3:   44:    int i = 0, k = 0;
        3:   45:    bool estaDentro = false;
       24:   46:    while (k < r.size()){
       24:   46-block  0
call    0 returned 24
branch  1 taken 21
branch  2 taken 3 (fallthrough)
      109:   47:        while (i < v.size()){
       21:   47-block  0
      109:   47-block  1
call    0 returned 109
branch  1 taken 88
branch  2 taken 21 (fallthrough)
       88:   48:            if (distEnKM(obtenerPosicion(v[i]), r[k]) < u) {
       88:   48-block  0
call    0 returned 88
call    1 returned 88
call    2 returned 88
branch  3 taken 88 (fallthrough)
branch  4 taken 0 (throw)
       88:   48-block  1
call    5 returned 88
branch  6 taken 88 (fallthrough)
branch  7 taken 0 (throw)
       88:   48-block  2
branch  8 taken 17 (fallthrough)
branch  9 taken 71
    $$$$$:   48-block  3
       17:   49:                estaDentro = true;
       17:   50:                i = v.size();
       17:   50-block  0
call    0 returned 17
        -:   51:            }
       88:   52:            i++;
       88:   52-block  0
        -:   53:        }
       21:   54:        if (!estaDentro){
       21:   54-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 17
        4:   55:            resp.push_back(r[k]);
        4:   55-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        -:   56:        }
       21:   57:        i = 0;
       21:   58:        k ++ ;
       21:   59:        estaDentro = false;
       21:   59-block  0
        -:   60:    }
        -:   61:
        3:   62:    return resp;
        3:   62-block  0
        3:   62-block  1
    =====:   63:}
    $$$$$:   63-block  0
call    0 never executed
        -:   64:
        -:   65:/***************************************** EJERCICIO flota ***************************************/
function _Z5flotaSt6vectorIS_ISt5tupleIJdS0_IJddEEEESaIS2_EESaIS4_EEdd called 7 returned 100% blocks executed 87%
        7:   66:int flota(vector<viaje> f, tiempo t0, tiempo tf) {
        7:   67:    int resp = 0;
        7:   68:    int i = 0;
       28:   69:    while (i < f.size()){
        7:   69-block  0
       28:   69-block  1
call    0 returned 28
branch  1 taken 21
branch  2 taken 7 (fallthrough)
       21:   70:        if (viajeEnFranjaHoraria(f[i], t0, tf)) // achicar esto
       21:   70-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
branch  3 taken 21 (fallthrough)
branch  4 taken 0 (throw)
       21:   70-block  1
call    5 returned 21
branch  6 taken 6 (fallthrough)
branch  7 taken 15
    $$$$$:   70-block  2
call    8 never executed
        6:   71:            resp = resp + 1;
        6:   71-block  0
       21:   72:        i = i + 1 ;
       21:   72-block  0
        -:   73:    }
        -:   74:
        7:   75:    return resp;
        7:   75-block  0
        7:   75-block  1
        -:   76:}
        -:   77:
        -:   78:/************************************** EJERCICIO construirGrilla *******************************/
function _Z15construirGrillaSt5tupleIJddEES0_ii called 5 returned 100% blocks executed 92%
        5:   79:grilla construirGrilla(gps esq1, gps esq2, int n, int m) {
        5:   80:    grilla resp = {}; int k = 1; int j = 1;
        5:   80-block  0
call    0 returned 5
        5:   81:    celda c; gps a; gps b;
        5:   82:    double maxlatitud = obtenerLatitud(esq1);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   83:    double minlatitud = obtenerLatitud(esq2);
        5:   83-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   84:    double maxlongitud = obtenerLongitud(esq2);
        5:   84-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   85:    double minlongitud = obtenerLongitud(esq1);
        5:   85-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       18:   86:    while(k < n+1){
        5:   86-block  0
       18:   86-block  1
branch  0 taken 13
branch  1 taken 5 (fallthrough)
       71:   87:        while (j < m+1) {
       13:   87-block  0
       71:   87-block  1
branch  0 taken 58
branch  1 taken 13 (fallthrough)
      116:   88:            a = {(maxlatitud - ((k - 1) * ((maxlatitud - minlatitud) / n))),
       58:   89:                 (minlongitud + ((j - 1)* ((maxlongitud - minlongitud) / m)))};
       58:   89-block  0
call    0 returned 58
call    1 returned 58
      116:   90:            b = {(maxlatitud - k * ((maxlatitud - minlatitud) / n)),
       58:   91:                 (minlongitud + (j * ((maxlongitud - minlongitud) / m)))};
call    0 returned 58
call    1 returned 58
       58:   92:            c = {a, b, {k, j}};
call    0 returned 58
call    1 returned 58
call    2 returned 58
       58:   93:            resp.push_back(c);
call    0 returned 58
branch  1 taken 58 (fallthrough)
branch  2 taken 0 (throw)
       58:   94:            j = j + 1;
       58:   94-block  0
        -:   95:        }
       13:   96:        k = k + 1;
       13:   97:        j = 1;
       13:   97-block  0
        -:   98:    }
        -:   99:
       10:  100:    return resp;
        5:  100-block  0
        5:  100-block  1
    =====:  101:}
    $$$$$:  101-block  0
call    0 never executed
        -:  102:
        -:  103:/************************************* EJERCICIO cantidadDeSaltos ******************************/
function _Z16cantidadDeSaltosSt6vectorISt5tupleIJS0_IJddEES1_S0_IJiiEEEESaIS3_EES_IS0_IJdS1_EESaIS6_EE called 2 returned 100% blocks executed 70%
        2:  104:int cantidadDeSaltos(grilla g, viaje v) {
        2:  105:    int resp = 0, i = 0;
        2:  106:    celda c, d;
        7:  107:    while (i < v.size()){
        2:  107-block  0
        7:  107-block  1
call    0 returned 7
branch  1 taken 5
branch  2 taken 2 (fallthrough)
        5:  108:        c = buscoCeldaDeUnViaje(v[i], g);
        5:  108-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  108-block  1
call    3 returned 5
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  108-block  2
call    7 returned 5
call    8 returned 5
    $$$$$:  108-block  3
call    9 never executed
    $$$$$:  108-block  4
        5:  109:        d = buscoCeldaDeUnViaje(buscoSiguientePunto(v,v[i]),g);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  109-block  0
call    3 returned 5
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  109-block  1
call    7 returned 5
branch  8 taken 5 (fallthrough)
branch  9 taken 0 (throw)
        5:  109-block  2
call   10 returned 5
branch 11 taken 5 (fallthrough)
branch 12 taken 0 (throw)
        5:  109-block  3
call   13 returned 5
call   14 returned 5
call   15 returned 5
    $$$$$:  109-block  4
    $$$$$:  109-block  5
call   16 never executed
    $$$$$:  109-block  6
    $$$$$:  109-block  7
call   17 never executed
    $$$$$:  109-block  8
        5:  110:        if (sqrt(pow((filaDeNombre(nombreDeCelda(c)) - filaDeNombre(nombreDeCelda(d))),2) +
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  110-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  110-block  1
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
        5:  110-block  2
call    9 returned 5
branch 10 taken 5 (fallthrough)
branch 11 taken 0 (throw)
        5:  110-block  3
call   12 returned 5
    $$$$$:  110-block  4
    $$$$$:  110-block  5
        5:  111:                 pow((columnaDeNombre(nombreDeCelda(c))- columnaDeNombre(nombreDeCelda(d))),2)) > 1)
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  111-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  111-block  1
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
        5:  111-block  2
call    9 returned 5
branch 10 taken 5 (fallthrough)
branch 11 taken 0 (throw)
        5:  111-block  3
call   12 returned 5
branch 13 taken 2 (fallthrough)
branch 14 taken 3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
        2:  112:            resp = resp + 1;
        2:  112-block  0
        5:  113:        i = i + 1;
        5:  113-block  0
        -:  114:    }
        2:  115:    return resp;
        2:  115-block  0
        2:  115-block  1
        -:  116:}
        -:  117:
        -:  118:
        -:  119:/************************************* EJERCICIO corregirViaje ******************************/
function _Z13corregirViajeRSt6vectorISt5tupleIJdS0_IJddEEEESaIS2_EES_IdSaIdEE called 2 returned 100% blocks executed 66%
        2:  120:void corregirViaje(viaje& v, vector<tiempo> errores){
        2:  121:    tuple<tiempo, gps> punto_a, punto_b;
        2:  122:    gps gps_corregido;
        5:  123:    for (int i = 0; i < errores.size(); ++i) {
        2:  123-block  0
        5:  123-block  1
call    0 returned 5
branch  1 taken 3
branch  2 taken 2 (fallthrough)
        3:  124:        int indice = puntoACorregir(v, errores[i]);
        3:  124-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  124-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  124-block  2
call    7 returned 3
    $$$$$:  124-block  3
call    8 never executed
    $$$$$:  124-block  4
        3:  125:        if ((indice !=0) && (indice != v.size()-1)){
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  125-block  0
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:  125-block  1
        2:  125-block  2
        3:  125-block  3
branch  5 taken 1 (fallthrough)
branch  6 taken 2
        1:  126:            punto_a = puntoInmediatoAnterior(v[indice], v, errores);
        1:  126-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  126-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  126-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  126-block  4
call   13 never executed
    $$$$$:  126-block  5
    $$$$$:  126-block  6
call   14 never executed
    $$$$$:  126-block  7
        1:  127:            punto_b = puntoInmediatoPosterior(v[indice], v, errores);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  127-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  127-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  127-block  2
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  127-block  3
call   13 never executed
    $$$$$:  127-block  4
    $$$$$:  127-block  5
call   14 never executed
    $$$$$:  127-block  6
        1:  128:            gps_corregido = gpsSobreRecta(punto_a, punto_b, errores[i]);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  128-block  0
call    4 returned 1
        -:  129:        }
        2:  130:        else if (indice == 0){
        2:  130-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  131:            punto_a  = puntoInmediatoPosterior(v[indice], v, errores);
        1:  131-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  131-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  131-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  131-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  131-block  4
call   13 never executed
    $$$$$:  131-block  5
    $$$$$:  131-block  6
call   14 never executed
    $$$$$:  131-block  7
        1:  132:            punto_b  = puntoInmediatoPosterior(punto_a, v, errores);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  132-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  132-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  132-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
    $$$$$:  132-block  3
call   12 never executed
    $$$$$:  132-block  4
    $$$$$:  132-block  5
call   13 never executed
    $$$$$:  132-block  6
        1:  133:            gps_corregido = gpsSobreRecta(punto_a, punto_b, errores[i]);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  133-block  0
call    4 returned 1
        -:  134:        } else{
        1:  135:            punto_a = puntoInmediatoAnterior(v[indice], v, errores);
        1:  135-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  135-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  135-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  135-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  135-block  4
call   13 never executed
    $$$$$:  135-block  5
    $$$$$:  135-block  6
call   14 never executed
    $$$$$:  135-block  7
        1:  136:            punto_b = puntoInmediatoAnterior(punto_a, v, errores);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  136-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  136-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  136-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
    $$$$$:  136-block  3
call   12 never executed
    $$$$$:  136-block  4
    $$$$$:  136-block  5
call   13 never executed
    $$$$$:  136-block  6
        1:  137:            gps_corregido = gpsSobreRecta(punto_a, punto_b, errores[i]);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  137-block  0
call    4 returned 1
        -:  138:        }
        -:  139:
        3:  140:        v[indice] = make_tuple(errores[i], gps_corregido);
        3:  140-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  140-block  1
call    4 returned 3
call    5 returned 3
        -:  141:    }
        -:  142:
        4:  143:    return;
        2:  143-block  0
        2:  143-block  1
        -:  144:}
